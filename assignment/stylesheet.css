:root {
    --background-dark: #1F2937;
    --text-light: #F9FAF8;
    --background-light: #E5E7Eb;
}

/* header {
    background-color: var(--background-dark);
    text-align: center;
} */

.header {
    background-color: var(--background-dark);
    text-align: center;;
}

/* h1, h2 {
    color: var(--text-light);
} */

.header_text {
    color: var(--text-light);
}

/* main {
    padding: 1em;
    background-color: var(--background-light);
} */

.content {
    padding: 1em;
    background-color: var(--background-light);
}

body {
    /* background-image: url("./record.png"); */
    /* By default backround-image repeats horizonatal 
    and vertical. You can use background-repeat to only
    repeat horizontal, or vertical, or no repeat. Or do 
    accept other values as space or round. */
    /* background-repeat: repeat; */
    margin: 0;
}

/* In the readme for the stretch it says to us classes 
instead of elements except for adding the margin to the 
`body` not sure if that meant to still make a class and 
use it for the background image only? So since I understand
utilizing classes, I thought I would split the difference
and show that I know how to use an ID as well!*/

#body {
    background-image: url("./record.png");
}


/* I've done some flexbox work in the past, now i'm learning a bit of grid 
thought I would mess around here. The thought being if you have a record collection
to display on the page could pull the images and display in a grid format. */

.grid-container {
    display: grid;
    /* I assume I could create a variable for the number of rows
    and columns so based on like numberOfColumns = collection.length
    I could change the grid layout "repeat(var--(numberOfColumns), 1fr) */
    grid-template-columns: repeat(4, 1fr);
    grid-gap: 5%;
    margin: 25px;
}

/* Did some messing around with using percentages and em's. Something
I would like to spend more time with for some better responsiveness. 
Maybe some of the frameworks we use will have that built in better? */

.grid-item {
    border: 2px solid black;
    border-radius: 10%;
    background-color: #47a2c9;
    text-align: center;
    padding: 7em 0;
}